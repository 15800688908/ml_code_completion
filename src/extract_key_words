#!/usr/bin/env python
# This file goes through the data directory, looking for source files that
# match the input pattern, parses these files and extracts out key words from
# the files.
# Usage:
# ./extract_key_words -s <comma separated suffix list> -o <outfile>

import fnmatch as fn
import optparse as op
import os
import re

# command line options
def get_comma_separated_args(option, opt, value, parser):
  setattr(parser.values, option.dest, value.split(','))

parser = op.OptionParser()
parser.add_option('-s', '--suffix', dest='suffixes',
                  type='string', action='callback',
                  callback=get_comma_separated_args,
                  help='include files with this suffix (eg: c,h) from data '
                  'directory')
parser.add_option('-o', '--outfile', dest='outfile',
                  type='string',
                  help='dave key words to this file')

(options, args) = parser.parse_args()

# check option validity
if not (options.suffixes and options.outfile):
  print('Please pass a list of suffixes for filenames, and an output file'\
        'name to save key words to.')
  print('Try ./extract_key_words -h for a list of all options.')
  exit(1)

# check suffix validity
for suffix in options.suffixes:
  if re.match(r'[\W0-9]+', suffix):
    print('Suffixes must consist of alphabets only.')
globs = map(lambda x : '*.' + x, options.suffixes)

# list of files to read
data_dir = '../data'
matches = []
for glob in globs:
  for root, dirnames, filenames in os.walk(data_dir):
    for filename in fn.filter(filenames, glob):
      matches.append(os.path.join(root, filename))

# parse files and build dictionary of words
# (TODO)
